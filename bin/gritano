#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(File.dirname(__FILE__))

require 'gritano'

require 'etc'

def help
  puts "
  gritano [install|user|repo] [command] parameters
  
  Examples:
  gritano install
  gritano user add username
  gritano user rm username
  gritano repo add username reponame.git
  gritano repo rm username reponame.git
  gritano repo +read username reponame.git
  gritano repo +write username reponame.git
  gritano repo -read username reponame.git
  gritano repo -write username reponame.git"
end

def install
  Dir.mkdir(File.join(Etc.getpwuid.dir, '.gritano')) unless File.exist?(File.join(Etc.getpwuid.dir, '.gritano'))
  File.open(File.join(Etc.getpwuid.dir, '.gritano', 'database.yml'), "w") do |f|
    f.write("adapter: sqlite3\ndatabase: #{File.join(Etc.getpwuid.dir, '.gritano', 'database.db')}\n")
  end
  FileUtils.rm(File.join(Etc.getpwuid.dir, '.gritano', 'database.db')) if File.exist?(File.join(Etc.getpwuid.dir, '.gritano', 'database.db'))
  ActiveRecord::Base.establish_connection(YAML::load(File.open(File.join(Etc.getpwuid.dir, '.gritano', 'database.yml'))))
  ActiveRecord::Migrator.migrate('db/migrate', ENV["VERSION"] ? ENV["VERSION"].to_i : nil )
end

if ARGV.length == 1
  if ARGV[0] =='install'
    install
  else
    help
  end
elsif ARGV.length == 2 or ARGV.length == 0
  help
else
  ActiveRecord::Base.establish_connection(YAML::load(File.open(File.join(Etc.getpwuid.dir, '.gritano', 'database.yml'))))
  console = Gritano::Console.new
  begin
    if console.execute(ARGV)
      puts "command executed successfully"
    else
      puts "an error occurred"
    end
  rescue NoMethodError
    puts help
  end
end